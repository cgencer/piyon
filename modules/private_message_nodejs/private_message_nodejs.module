<?php

/**
 * @file
 * Holds hooks for the Private message Nodejs module.
 *
 * Integrates Nodejs with the Private Message module.
 */

use Drupal\Core\Block\BlockPluginInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\private_message\Entity\PrivateMessageThreadInterface;

/**
 * Implements hook_entity_type_alter().
 */
function private_message_nodejs_entity_type_alter(array &$entity_types) {
  if (isset($entity_types['private_message'])) {
    $entity_types['private_message']->setFormClass('add', 'Drupal\private_message_nodejs\Form\PrivateMessageNodejsForm');
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function private_message_nodejs_form_entity_view_display_edit_form_alter(array &$form, FormStateInterface $formState) {
  if ($form['#entity_type'] == 'private_message_thread' && isset($form['fields']['private_messages'], $form['fields']['private_messages']['plugin']['settings_edit_form']['settings']['ajax_refresh_rate'])) {
    // Remove access to the the ajax refresh rate, as it is not applicable when
    // this module is enabled.
    $form['fields']['private_messages']['plugin']['settings_edit_form']['settings']['ajax_refresh_rate']['#access'] = FALSE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alter block settings forms.
 */
function private_message_nodejs_form_block_form_alter(array &$form, FormStateInterface $formState) {
  // Act on the private message inbox block settings.
  if ($formState->getFormObject()->getEntity()->getPluginId() == 'private_message_inbox_block') {
    // Set the ajax refresh rate to be hidden, as refreshing of the inbox will
    // happen using nodejs.
    $form['settings']['ajax_refresh_rate']['#access'] = FALSE;
  }
  // Act on the private message notification block settings.
  elseif ($formState->getFormObject()->getEntity()->getPluginId() == 'private_message_notification_block') {
    // Set the ajax refresh rate to be hidden, as refreshing of the inbox will
    // happen using nodejs.
    $form['settings']['ajax_refresh_rate']['#access'] = FALSE;
  }
}

/**
 * Implements hook_field_formatter_settings_summary_alter().
 */
function private_message_field_formatter_settings_summary_alter(array &$summary, $context) {
  if ($context['formatter']->getPluginId() == 'private_message_thread_message_formatter') {
    // Remove the summary of the the ajax refresh rate, as it is not applicable
    // when this module is enabled.
    unset($summary['ajax_refresh_rate']);
  }
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function private_message_nodejs_private_message_thread_view_alter(array &$build, PrivateMessageThreadInterface $thread, EntityViewDisplayInterface $display) {
  if (isset($build['private_messages'])) {
    // Attach node.js library.
    \Drupal::service('private_message_nodejs.service')->attachNodeJsLibary('thread', $build['private_messages']);
    // Disable ajax refresh.
    $build['private_messages']['#attached']['drupalSettings']['privateMessageThread']['refreshRate'] = 0;

    $config = \Drupal::config('private_message_nodejs.settings');
    if ($config->get('enable_debug')) {
      \Drupal::logger('Private Message Nodejs debug')->notice(t('Private Message thread Node.js integration initiated'));
    }
  }

}

/**
 * Implements hook_block_view_BASE_BLOCK_ID_alter().
 */
function private_message_nodejs_block_view_private_message_inbox_block_alter(array &$build, BlockPluginInterface $block) {
  $build['#pre_render'][] = 'private_message_nodejs_block_view_private_message_inbox_block_pre_render';
}

/**
 * Custom prerender callback for the private message inbox block.
 *
 * Disables polling in the private message inbox, as it is handled instead by
 * nodejs.
 */
function private_message_nodejs_block_view_private_message_inbox_block_pre_render($build) {

  // Attach node.js library.
  \Drupal::service('private_message_nodejs.service')->attachNodeJsLibary('inbox', $build['content']);
  // Disable AJAX refresh.
  $build['content']['#attached']['drupalSettings']['privateMessageInboxBlock']['ajaxRefreshRate'] = 0;

  $config = \Drupal::config('private_message_nodejs.settings');
  if ($config->get('enable_debug')) {
    \Drupal::logger('Private Message Nodejs debug')->notice(t('Private Message Inbox Node.js integration initiated'));
  }

  return $build;
}

/**
 * Implements hook_block_view_BASE_BLOCK_ID_alter().
 */
function private_message_nodejs_block_view_private_message_notification_block_alter(array &$build, BlockPluginInterface $block) {
  $build['#pre_render'][] = 'private_message_nodejs_block_view_private_message_notification_block_pre_render';
}

/**
 * Custom prerender callback for the private message notification block.
 *
 * Disables polling in the private notification block, as it is handled instead
 * by nodejs.
 */
function private_message_nodejs_block_view_private_message_notification_block_pre_render($build) {

  // Attach node.js library.
  \Drupal::service('private_message_nodejs.service')->attachNodeJsLibary('notification_block', $build['content']);
  // Disable AJAX refresh.
  $build['content']['#attached']['drupalSettings']['privateMessageNotificationBlock']['ajaxRefreshRate'] = 0;

  $config = \Drupal::config('private_message_nodejs.settings');
  if ($config->get('enable_debug')) {
    \Drupal::logger('Private Message Nodejs debug')->notice(t('Private Message notification block Node.js integration initiated'));
  }

  return $build;
}

/**
 * Implements hook_page_attachments().
 */
function private_message_nodejs_page_attachments(array &$attachments) {
  $config = \Drupal::config('private_message_nodejs.settings');
  if ($config->get('browser_notification_enable')) {
    // Attach node.js library.
    \Drupal::service('private_message_nodejs.service')->attachNodeJsLibary('browser_notification', $attachments);

    if ($config->get('enable_debug')) {
      \Drupal::logger('Private Message Nodejs debug')->notice(t('Private Message Browser Notification Node.js integration initiated'));
    }
  }

  $route_name = \Drupal::routeMatch()->getRouteName();
  // Attach the JS library to the status report page to inform users of the
  // server status.
  if ($route_name == 'system.status') {
    \Drupal::service('private_message_nodejs.service')->attachNodeJsLibary('pmn_status_report', $attachments);
  }
}
